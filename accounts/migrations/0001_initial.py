# Generated by Django 5.0.1 on 2024-01-06 10:47

import accounts.models
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.CharField(default=accounts.models.create_id, editable=False, max_length=22, primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=50)),
                ('price', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='SupportUser',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=30, verbose_name='姓')),
                ('last_name', models.CharField(max_length=30, verbose_name='名')),
                ('first_kana', models.CharField(max_length=30, verbose_name='姓カナ')),
                ('last_kana', models.CharField(max_length=30, verbose_name='名カナ')),
                ('post_code', models.IntegerField(blank=True, null=True, verbose_name='郵便番号')),
                ('state', models.CharField(blank=True, max_length=6, null=True, verbose_name='都道府県')),
                ('city', models.CharField(blank=True, max_length=10, null=True, verbose_name='市区町村')),
                ('city_block', models.CharField(blank=True, max_length=30, null=True, verbose_name='丁目、番号')),
                ('apartments', models.CharField(blank=True, max_length=30, null=True, verbose_name='マンション名、部屋番号')),
                ('email', models.EmailField(blank=True, max_length=30, null=True, verbose_name='メールアドレス')),
                ('phone', models.IntegerField(blank=True, null=True, verbose_name='電話番号')),
                ('donation', models.IntegerField(blank=True, null=True, verbose_name='賛助額')),
                ('payment', models.CharField(blank=True, max_length=30, null=True, verbose_name='支払方法')),
                ('is_confirmed', models.BooleanField(default=False, verbose_name='支払確認')),
                ('created', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='登録日')),
                ('shipping', models.DateTimeField(blank=True, null=True, verbose_name='発送確認')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='メールアドレス')),
                ('first_name', models.CharField(max_length=30, verbose_name='姓')),
                ('last_name', models.CharField(max_length=30, verbose_name='名')),
                ('department', models.CharField(max_length=50, verbose_name='所属')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='登録日')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', accounts.models.UserManager()),
            ],
        ),
    ]
